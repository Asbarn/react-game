{"version":3,"sources":["components/Footer/Footer.module.css","components/Header/Header.module.css","components/Header/Header.js","components/Footer/assets/images/rs_school_js.svg","components/Footer/Footer.js","helper.js","components/Checker/Checker.js","components/Square/Square.js","components/Field/Field.js","components/AI/AI.js","components/Game/Game.js","store.js","components/Settings/Settings.js","sounds/theme.mp3","sounds/checkerMove.mp3","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Header","className","styles","container","header","Footer","footer","inner","list","href","listItem","schoolLogo","target","rel","schoolLogoLink","src","SchoolLogoIcon","alt","schoolLogoIcon","isOdd","n","Math","abs","getKeyByValue","object","value","Object","keys","find","key","getColAsInt","columns","coordinate","charAt","getColAsAlph","columnInt","hasOwnProperty","getRowAsInt","parseInt","returnPlayerName","playerBool","ReactCheckers","this","coordinates","col","utils","row","columnLeft","columnRight","rowUpper","rowLower","corners","leftUpper","rightUpper","leftLower","rightLower","boardState","isKing","hasJumped","movesOut","moves","jumps","killJumps","getCorners","player","advanceRow","cornerCoordinates","indexOf","push","neighborPiece","opponentCorners","potentialJump","concat","killJumpsOut","length","state","color","currentState","assign","history","stepNumber","movingPiece","activePiece","jumpArray","jumpKills","shouldKing","setCurrentPlayer","newMoves","setActivePiece","getMoves","currentPlayer","stateOut","winner","evaluateWinner","player1Pieces","player1Moves","player2Pieces","player2Moves","moveCount","Square","props","squareClasses","onClick","Field","renderSquare","boardRender","columnsRender","colorClass","moveClass","join","reverse","AI","computerMoves","currentSquare","pieceMoves","getComputerMoves","moveKeys","superMoves","m","piece","movesData","jumpMoves","jumpCoordinates","highestScore","bestMove","a","moveTo","score","stateLeaf","newJumpMoves","finalMove","highestAllMoves","pieces","pieceMove","moveScore","chooseMove","floor","random","out","randomPiece","randomMoveTo","createBoard","board","initPlayers","forEach","i","createPiece","location","connect","players","app","theme","gameStatus","audio","User","Computer","Opponent","initialState","useState","setState","cbRef","useRef","setStateCallback","useCallback","cb","current","useEffect","useStateCallback","undoClass","getCurrentState","slice","handleClick","clickedSquare","postMoveState","movePiece","play","updateStatePostMove","then","res","computerTurn","curState","setTimeout","computerMove","curHistory","getSmartMove","result","Promise","rej","localStorage","getItem","console","log","JSON","parse","setItem","stringify","SET_PLAYERS","SET_COLOR","SET_MUSIC","SET_MUSIC_CHECK","SET_THEME","music","musicCheck","setMusic","dispatch","type","setMusicAction","setMusicCheck","setMusicCheckAction","rootReducer","combineReducers","action","persistedState","savedState","e","loadFromStorage","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","subscribe","saveToStorage","getState","setColor","setColorAction","setTheme","setThemeAction","onChangeTheme","event","onValueChange","checked","onChange","min","max","step","useAudio","url","ending","volume","Audio","playing","setPlaying","pause","addEventListener","removeEventListener","setPlayers","setPlayersAction","useHistory","startGame","themeCheck","audioCheck","document","to","exact","from","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0d28113d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Footer_container__2nO0Y\",\"footer\":\"Footer_footer__3grSA\",\"listItem\":\"Footer_listItem__29l2d\",\"inner\":\"Footer_inner__18Y4q\",\"list\":\"Footer_list__1ZlDO\",\"schoolLogo\":\"Footer_schoolLogo__2uf7z\",\"schoolLogoLink\":\"Footer_schoolLogoLink__1FiyZ\",\"schoolLogoIcon\":\"Footer_schoolLogoIcon__2q0lE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Header_container__MPGBL\",\"header\":\"Header_header__3sU9y\"};","import { useState, useEffect } from \"react\";\r\nimport styles from \"./Header.module.css\";\r\n\r\nconst Header = () => {\r\n  \r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.header}>\r\n        <h1>Checkers</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","export default __webpack_public_path__ + \"static/media/rs_school_js.5ebff106.svg\";","import styles from \"./Footer.module.css\";\r\nimport SchoolLogoIcon from \"./assets/images/rs_school_js.svg\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer className={styles.footer}>\r\n      <div className={styles.container}>\r\n        <div className={styles.inner}>\r\n          <h2>{\"© 2021 Checkers\"}</h2>\r\n\r\n          <div className={styles.list}>\r\n            <a href=\"https://github.com/asbarn\" className={styles.listItem}>\r\n              {\"Yaroslav Kobernyk\"}\r\n            </a>\r\n          </div>\r\n\r\n          <div className={styles.schoolLogo}>\r\n            <a\r\n              href=\"https://rs.school/js/\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n              className={styles.schoolLogoLink}\r\n            >\r\n              <img\r\n                src={SchoolLogoIcon}\r\n                alt=\"School logo\"\r\n                className={styles.schoolLogoIcon}\r\n              />\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","export function isOdd(n) {\r\n  return Math.abs(n % 2) === 1;\r\n}\r\n\r\nexport function getKeyByValue(object, value) {\r\n  return Object.keys(object).find((key) => object[key] === value);\r\n}\r\n\r\nexport function getColAsInt(columns, coordinate) {\r\n  return columns[coordinate.charAt(0)];\r\n}\r\n\r\nexport function getColAsAlph(columns, columnInt) {\r\n  for (let key in columns) {\r\n    if (!columns.hasOwnProperty(key)) {\r\n      continue;\r\n    }\r\n\r\n    if (columnInt === columns[key]) {\r\n      return key;\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport function getRowAsInt(coordinate) {\r\n  return parseInt(coordinate.charAt(1), 10);\r\n}\r\n\r\nexport function returnPlayerName(playerBool) {\r\n  return playerBool === true ? \"player1\" : \"player2\";\r\n}\r\n","import * as utils from \"../../helper.js\";\r\n\r\nclass ReactCheckers {\r\n  constructor(columns) {\r\n    this.columns = columns;\r\n  }\r\n\r\n  getCorners(coordinates) {\r\n    const col = utils.getColAsInt(this.columns, coordinates);\r\n    const row = utils.getRowAsInt(coordinates);\r\n\r\n    const columnLeft =\r\n      col - 1 >= 0 ? utils.getColAsAlph(this.columns, col - 1) : false;\r\n    const columnRight =\r\n      col + 1 <= 7 ? utils.getColAsAlph(this.columns, col + 1) : false;\r\n\r\n    const rowUpper = row + 1 < 9 ? row + 1 : false;\r\n    const rowLower = row - 1 > 0 ? row - 1 : false;\r\n\r\n    let corners = {};\r\n\r\n    corners.leftUpper =\r\n      columnLeft !== false && rowUpper !== false ? columnLeft + rowUpper : null;\r\n    corners.rightUpper =\r\n      columnRight !== false && rowUpper !== false\r\n        ? columnRight + rowUpper\r\n        : null;\r\n    corners.leftLower =\r\n      columnLeft !== false && rowLower !== false ? columnLeft + rowLower : null;\r\n    corners.rightLower =\r\n      columnRight !== false && rowLower !== false\r\n        ? columnRight + rowLower\r\n        : null;\r\n\r\n    return corners;\r\n  }\r\n\r\n  getMoves(boardState, coordinates, isKing = false, hasJumped = false) {\r\n    if (boardState[coordinates] === null) {\r\n      return [];\r\n    }\r\n\r\n    let moves = [];\r\n    let jumps = [];\r\n\r\n    let killJumps = {};\r\n\r\n    const corners = this.getCorners(coordinates);\r\n\r\n    const row = utils.getRowAsInt(coordinates);\r\n    const player = boardState[coordinates].player;\r\n\r\n    const advanceRow = player === \"player1\" ? row - 1 : row + 1;\r\n\r\n    for (let key in corners) {\r\n      if (!corners.hasOwnProperty(key)) {\r\n        continue;\r\n      }\r\n\r\n      let cornerCoordinates = corners[key];\r\n\r\n      if (cornerCoordinates === null) {\r\n        continue;\r\n      }\r\n\r\n      if (!isKing && cornerCoordinates.indexOf(advanceRow) < 0) {\r\n        continue;\r\n      }\r\n\r\n      if (boardState[cornerCoordinates] === null) {\r\n        moves.push(cornerCoordinates);\r\n      } else {\r\n        let neighborPiece = boardState[cornerCoordinates];\r\n\r\n        if (neighborPiece.player === player) {\r\n          continue;\r\n        }\r\n\r\n        let opponentCorners = this.getCorners(cornerCoordinates);\r\n        let potentialJump = opponentCorners[key];\r\n\r\n        if (boardState[potentialJump] === null) {\r\n          killJumps[cornerCoordinates] = potentialJump;\r\n          jumps.push(potentialJump);\r\n        }\r\n      }\r\n    }\r\n\r\n    let movesOut;\r\n\r\n    if (hasJumped === false) {\r\n      movesOut = moves.concat(jumps);\r\n    } else {\r\n      // If the piece has already jumped, only additional jumps are available\r\n      movesOut = jumps;\r\n    }\r\n\r\n    let killJumpsOut = jumps.length > 0 ? killJumps : null;\r\n\r\n    return [movesOut, killJumpsOut];\r\n  }\r\n\r\n  movePiece(coordinates, state, color) {\r\n    let currentState = Object.assign({}, state.history[state.stepNumber]);\r\n    let boardState = Object.assign({}, currentState.boardState);\r\n    let movingPiece = Object.assign({}, boardState[state.activePiece]);\r\n\r\n    let jumpArray = [];\r\n\r\n    for (let key in state.jumpKills) {\r\n      if (!state.jumpKills.hasOwnProperty(key)) {\r\n        continue;\r\n      }\r\n\r\n      jumpArray.push(state.jumpKills[key]);\r\n    }\r\n\r\n    // Don't move if the coordinates don't match a moveable or jumpable square.\r\n    if (\r\n      state.moves.indexOf(coordinates) < 0 &&\r\n      jumpArray.indexOf(coordinates) < 0\r\n    ) {\r\n      return null;\r\n    }\r\n\r\n    // King me maybe?\r\n    if (this.shouldKing(movingPiece, coordinates)) {\r\n      movingPiece.isKing = true;\r\n    }\r\n\r\n    // Move piece to new coordinates\r\n    boardState[state.activePiece] = null;\r\n    boardState[coordinates] = movingPiece;\r\n\r\n    // Remove opponent piece if jump is made\r\n    const player = movingPiece.player;\r\n    let hasJumped = null;\r\n    let newMoves = [];\r\n    let setCurrentPlayer;\r\n\r\n    setCurrentPlayer = player === \"player2\";\r\n    let setActivePiece = null;\r\n\r\n    if (jumpArray.indexOf(coordinates) > -1) {\r\n      let opponentPosition = utils.getKeyByValue(state.jumpKills, coordinates);\r\n      boardState[opponentPosition] = null;\r\n\r\n      newMoves = this.getMoves(\r\n        boardState,\r\n        coordinates,\r\n        movingPiece.isKing,\r\n        true\r\n      );\r\n\r\n      if (newMoves[0].length > 0) {\r\n        hasJumped = true;\r\n        setCurrentPlayer = currentState.currentPlayer;\r\n        setActivePiece = coordinates;\r\n      } else {\r\n        hasJumped = null;\r\n      }\r\n    }\r\n\r\n    if (hasJumped === true) {\r\n      if (newMoves[0].length > 0) {\r\n        setCurrentPlayer = currentState.currentPlayer;\r\n        setActivePiece = coordinates;\r\n      }\r\n    }\r\n\r\n    let stateOut = {};\r\n\r\n    stateOut.boardState = boardState;\r\n    stateOut.currentPlayer = setCurrentPlayer;\r\n    stateOut.activePiece = setActivePiece;\r\n    stateOut.moves = hasJumped === true ? newMoves[0] : [];\r\n    stateOut.jumpKills = hasJumped === true ? newMoves[1] : null;\r\n    stateOut.hasJumped = hasJumped === true ? player : null;\r\n    stateOut.winner = this.evaluateWinner(boardState);\r\n\r\n    return stateOut;\r\n  }\r\n\r\n  shouldKing(movingPiece, coordinates) {\r\n    if (movingPiece.isKing === true) {\r\n      return false;\r\n    }\r\n\r\n    const row = utils.getRowAsInt(coordinates);\r\n    const player = movingPiece.player;\r\n\r\n    return (\r\n      (row === 1 && player === \"player1\") || (row === 8 && player === \"player2\")\r\n    );\r\n  }\r\n\r\n  evaluateWinner(boardState) {\r\n    let player1Pieces = 0;\r\n    let player1Moves = 0;\r\n\r\n    let player2Pieces = 0;\r\n    let player2Moves = 0;\r\n\r\n    for (let coordinates in boardState) {\r\n      if (\r\n        !boardState.hasOwnProperty(coordinates) ||\r\n        boardState[coordinates] === null\r\n      ) {\r\n        continue;\r\n      }\r\n\r\n      const movesData = this.getMoves(\r\n        boardState,\r\n        coordinates,\r\n        boardState[coordinates].isKing,\r\n        false\r\n      );\r\n      const moveCount = movesData[0].length;\r\n\r\n      if (boardState[coordinates].player === \"player1\") {\r\n        ++player1Pieces;\r\n        player1Moves += moveCount;\r\n      } else {\r\n        ++player2Pieces;\r\n        player2Moves += moveCount;\r\n      }\r\n    }\r\n\r\n    if (player1Pieces === 0) {\r\n      return \"player2pieces\";\r\n    }\r\n\r\n    if (player2Pieces === 0) {\r\n      return \"player1pieces\";\r\n    }\r\n\r\n    if (player1Moves === 0) {\r\n      return \"player2moves\";\r\n    }\r\n\r\n    if (player2Moves === 0) {\r\n      return \"player1moves\";\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default ReactCheckers;\r\n","import React from \"react\";\r\n\r\nconst Square = (props) => {\r\n  const squareClasses = props[\"squareClasses\"];\r\n  const onClick = props[\"onClick\"];\r\n\r\n  return (\r\n    <button className={\"square \" + squareClasses} onClick={onClick}>\r\n      <div></div>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Square;\r\n","import React from \"react\";\r\nimport * as utils from \"../../helper.js\";\r\nimport Square from \"../Square/Square\";\r\n\r\nconst Field = (props) => {\r\n  const renderSquare = (coordinates, squareClasses) => {\r\n    return (\r\n      <Square\r\n        key={coordinates}\r\n        squareClasses={squareClasses}\r\n        onClick={() => props.onClick(coordinates)}\r\n      />\r\n    );\r\n  };\r\n\r\n  let boardRender = [];\r\n  let columnsRender = [];\r\n  const moves = props.moves;\r\n\r\n  for (let coordinates in props.boardState) {\r\n    if (!props.boardState.hasOwnProperty(coordinates)) {\r\n      continue;\r\n    }\r\n\r\n    const col = utils.getColAsInt(props.columns, coordinates);\r\n    const row = utils.getRowAsInt(coordinates);\r\n\r\n    const currentPlayer = utils.returnPlayerName(props.currentPlayer);\r\n\r\n    const colorClass =\r\n      (utils.isOdd(col) && utils.isOdd(row)) ||\r\n      (!utils.isOdd(col) && !utils.isOdd(row))\r\n        ? \"white\"\r\n        : \"black\";\r\n\r\n    let squareClasses = [];\r\n\r\n    squareClasses.push(coordinates);\r\n    squareClasses.push(colorClass);\r\n\r\n    if (props.activePiece === coordinates) {\r\n      squareClasses.push(\"isActive\");\r\n    }\r\n\r\n    if (moves.indexOf(coordinates) > -1) {\r\n      let moveClass = \"movable \" + currentPlayer + \"-move\";\r\n      squareClasses.push(moveClass);\r\n    }\r\n\r\n    if (props.boardState[coordinates] !== null) {\r\n      squareClasses.push(props.boardState[coordinates].player + \" piece\");\r\n\r\n      if (props.boardState[coordinates].isKing === true) {\r\n        squareClasses.push(\"king\");\r\n      }\r\n    }\r\n\r\n    squareClasses = squareClasses.join(\" \");\r\n\r\n    columnsRender.push(\r\n      renderSquare(coordinates, squareClasses, props.boardState[coordinates])\r\n    );\r\n\r\n    if (columnsRender.length >= 8) {\r\n      columnsRender = columnsRender.reverse();\r\n      boardRender.push(\r\n        <div key={boardRender.length} className=\"board-col\">\r\n          {columnsRender}\r\n        </div>\r\n      );\r\n      columnsRender = [];\r\n    }\r\n  }\r\n  return boardRender;\r\n};\r\n\r\nexport default Field;\r\n","import * as utils from \"../../helper.js\";\r\n\r\nclass AI {\r\n  constructor(columns) {\r\n    this.columns = columns;\r\n  }\r\n\r\n  getCorners(coordinates) {\r\n    const col = utils.getColAsInt(this.columns, coordinates);\r\n    const row = utils.getRowAsInt(coordinates);\r\n\r\n    const columnLeft =\r\n      col - 1 >= 0 ? utils.getColAsAlph(this.columns, col - 1) : false;\r\n    const columnRight =\r\n      col + 1 <= 7 ? utils.getColAsAlph(this.columns, col + 1) : false;\r\n\r\n    const rowUpper = row + 1 < 9 ? row + 1 : false;\r\n    const rowLower = row - 1 > 0 ? row - 1 : false;\r\n\r\n    let corners = {};\r\n\r\n    corners.leftUpper =\r\n      columnLeft !== false && rowUpper !== false ? columnLeft + rowUpper : null;\r\n    corners.rightUpper =\r\n      columnRight !== false && rowUpper !== false\r\n        ? columnRight + rowUpper\r\n        : null;\r\n    corners.leftLower =\r\n      columnLeft !== false && rowLower !== false ? columnLeft + rowLower : null;\r\n    corners.rightLower =\r\n      columnRight !== false && rowLower !== false\r\n        ? columnRight + rowLower\r\n        : null;\r\n\r\n    return corners;\r\n  }\r\n\r\n  getMoves(boardState, coordinates, isKing = false, hasJumped = false) {\r\n    if (boardState[coordinates] === null) {\r\n      return [];\r\n    }\r\n\r\n    let moves = [];\r\n    let jumps = [];\r\n\r\n    let killJumps = {};\r\n\r\n    const corners = this.getCorners(coordinates);\r\n\r\n    const row = utils.getRowAsInt(coordinates);\r\n    const player = boardState[coordinates].player;\r\n\r\n    const advanceRow = player === \"player1\" ? row - 1 : row + 1;\r\n\r\n    for (let key in corners) {\r\n      if (!corners.hasOwnProperty(key)) {\r\n        continue;\r\n      }\r\n\r\n      let cornerCoordinates = corners[key];\r\n\r\n      if (cornerCoordinates === null) {\r\n        continue;\r\n      }\r\n\r\n      if (!isKing && cornerCoordinates.indexOf(advanceRow) < 0) {\r\n        continue;\r\n      }\r\n\r\n      if (boardState[cornerCoordinates] === null) {\r\n        moves.push(cornerCoordinates);\r\n      } else {\r\n        let neighborPiece = boardState[cornerCoordinates];\r\n\r\n        if (neighborPiece.player === player) {\r\n          continue;\r\n        }\r\n\r\n        let opponentCorners = this.getCorners(cornerCoordinates);\r\n        let potentialJump = opponentCorners[key];\r\n\r\n        if (boardState[potentialJump] === null) {\r\n          killJumps[cornerCoordinates] = potentialJump;\r\n          jumps.push(potentialJump);\r\n        }\r\n      }\r\n    }\r\n\r\n    let movesOut;\r\n\r\n    if (hasJumped === false) {\r\n      movesOut = moves.concat(jumps);\r\n    } else {\r\n      // If the piece has already jumped, only additional jumps are available\r\n      movesOut = jumps;\r\n    }\r\n\r\n    let killJumpsOut = jumps.length > 0 ? killJumps : null;\r\n\r\n    return [movesOut, killJumpsOut];\r\n  }\r\n\r\n  movePiece(coordinates, state) {\r\n    let currentState = Object.assign({}, state.history[state.stepNumber]);\r\n    let boardState = Object.assign({}, currentState.boardState);\r\n    let movingPiece = Object.assign({}, boardState[state.activePiece]);\r\n\r\n    let jumpArray = [];\r\n\r\n    for (let key in state.jumpKills) {\r\n      if (!state.jumpKills.hasOwnProperty(key)) {\r\n        continue;\r\n      }\r\n\r\n      jumpArray.push(state.jumpKills[key]);\r\n    }\r\n\r\n    // Don't move if the coordinates don't match a moveable or jumpable square.\r\n    if (\r\n      state.moves.indexOf(coordinates) < 0 &&\r\n      jumpArray.indexOf(coordinates) < 0\r\n    ) {\r\n      return null;\r\n    }\r\n\r\n    // King me maybe?\r\n    if (this.shouldKing(movingPiece, coordinates)) {\r\n      movingPiece.isKing = true;\r\n    }\r\n\r\n    // Move piece to new coordinates\r\n    boardState[state.activePiece] = null;\r\n    boardState[coordinates] = movingPiece;\r\n\r\n    // Remove opponent piece if jump is made\r\n    const player = movingPiece.player;\r\n    let hasJumped = null;\r\n    let newMoves = [];\r\n    let setCurrentPlayer = player === \"player2\";\r\n    let setActivePiece = null;\r\n\r\n    if (jumpArray.indexOf(coordinates) > -1) {\r\n      let opponentPosition = utils.getKeyByValue(state.jumpKills, coordinates);\r\n      boardState[opponentPosition] = null;\r\n\r\n      newMoves = this.getMoves(\r\n        boardState,\r\n        coordinates,\r\n        movingPiece.isKing,\r\n        true\r\n      );\r\n\r\n      if (newMoves[0].length > 0) {\r\n        hasJumped = true;\r\n        setCurrentPlayer = currentState.currentPlayer;\r\n        setActivePiece = coordinates;\r\n      } else {\r\n        hasJumped = null;\r\n      }\r\n    }\r\n\r\n    if (hasJumped === true) {\r\n      if (newMoves[0].length > 0) {\r\n        setCurrentPlayer = currentState.currentPlayer;\r\n        setActivePiece = coordinates;\r\n      }\r\n    }\r\n\r\n    let stateOut = {};\r\n\r\n    stateOut.boardState = boardState;\r\n    stateOut.currentPlayer = setCurrentPlayer;\r\n    stateOut.activePiece = setActivePiece;\r\n    stateOut.moves = hasJumped === true ? newMoves[0] : [];\r\n    stateOut.jumpKills = hasJumped === true ? newMoves[1] : null;\r\n    stateOut.hasJumped = hasJumped === true ? player : null;\r\n    stateOut.winner = this.evaluateWinner(boardState);\r\n\r\n    return stateOut;\r\n  }\r\n\r\n  shouldKing(movingPiece, coordinates) {\r\n    if (movingPiece.isKing === true) {\r\n      return false;\r\n    }\r\n\r\n    const row = utils.getRowAsInt(coordinates);\r\n    const player = movingPiece.player;\r\n\r\n    return (\r\n      (row === 1 && player === \"player1\") || (row === 8 && player === \"player2\")\r\n    );\r\n  }\r\n\r\n  evaluateWinner(boardState) {\r\n    let player1Pieces = 0;\r\n    let player1Moves = 0;\r\n\r\n    let player2Pieces = 0;\r\n    let player2Moves = 0;\r\n\r\n    for (let coordinates in boardState) {\r\n      if (\r\n        !boardState.hasOwnProperty(coordinates) ||\r\n        boardState[coordinates] === null\r\n      ) {\r\n        continue;\r\n      }\r\n\r\n      const movesData = this.getMoves(\r\n        boardState,\r\n        coordinates,\r\n        boardState[coordinates].isKing,\r\n        false\r\n      );\r\n      const moveCount = movesData[0].length;\r\n\r\n      if (boardState[coordinates].player === \"player1\") {\r\n        ++player1Pieces;\r\n        player1Moves += moveCount;\r\n      } else {\r\n        ++player2Pieces;\r\n        player2Moves += moveCount;\r\n      }\r\n    }\r\n\r\n    if (player1Pieces === 0) {\r\n      return \"player2pieces\";\r\n    }\r\n\r\n    if (player2Pieces === 0) {\r\n      return \"player1pieces\";\r\n    }\r\n\r\n    if (player1Moves === 0) {\r\n      return \"player2moves\";\r\n    }\r\n\r\n    if (player2Moves === 0) {\r\n      return \"player1moves\";\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  getComputerMoves(boardState, player) {\r\n    const self = this;\r\n    let computerMoves = {};\r\n\r\n    for (const coordinates in boardState) {\r\n      if (!boardState.hasOwnProperty(coordinates)) {\r\n        continue;\r\n      }\r\n\r\n      const currentSquare = boardState[coordinates];\r\n\r\n      if (currentSquare == null) {\r\n        continue;\r\n      }\r\n\r\n      if (currentSquare.player !== player) {\r\n        continue;\r\n      }\r\n\r\n      const pieceMoves = self.getMoves(\r\n        boardState,\r\n        coordinates,\r\n        boardState[coordinates].isKing,\r\n        false\r\n      );\r\n\r\n      if (pieceMoves[0].length > 0 || pieceMoves[1] !== null) {\r\n        computerMoves[coordinates] = pieceMoves;\r\n      }\r\n    }\r\n\r\n    return computerMoves;\r\n  }\r\n\r\n  getSmartMove(state, boardState, player) {\r\n    const computerMoves = this.getComputerMoves(boardState, player);\r\n\r\n    const moveKeys = Object.keys(computerMoves);\r\n\r\n    const superMoves = {};\r\n\r\n    // Pieces\r\n    for (let m = 0; m < moveKeys.length; ++m) {\r\n      const piece = moveKeys[m];\r\n\r\n      const movesData = computerMoves[piece][0];\r\n      const jumpKills = computerMoves[piece][1];\r\n\r\n      const jumpMoves = [];\r\n\r\n      for (const jumpCoordinates in jumpKills) {\r\n        if (!jumpKills.hasOwnProperty(jumpCoordinates)) {\r\n          continue;\r\n        }\r\n        jumpMoves.push(jumpKills[jumpCoordinates]);\r\n      }\r\n\r\n      let highestScore = 0;\r\n      let bestMove = null;\r\n\r\n      // Piece moves\r\n      for (let a = 0; a < movesData.length; ++a) {\r\n        const moveTo = movesData[a];\r\n\r\n        let score = 0;\r\n\r\n        // let boardStateLeaf = Object.assign({}, boardstate);\r\n        let stateLeaf = Object.assign({}, state);\r\n\r\n        stateLeaf.activePiece = piece;\r\n        stateLeaf.moves = movesData;\r\n        stateLeaf.jumpKills = jumpKills;\r\n\r\n        if (jumpMoves.indexOf(moveTo) > -1) {\r\n          score += 10;\r\n        }\r\n\r\n        while (stateLeaf.currentPlayer === false) {\r\n          const newJumpMoves = this.getMoves(\r\n            stateLeaf,\r\n            stateLeaf.activePiece,\r\n            stateLeaf.activePiece.isKing,\r\n            true\r\n          );\r\n\r\n          stateLeaf.moves = newJumpMoves[0];\r\n          stateLeaf.jumpKills = newJumpMoves[1];\r\n\r\n          score += 10;\r\n        }\r\n\r\n        if (score >= highestScore) {\r\n          highestScore = score;\r\n          bestMove = moveTo;\r\n        }\r\n      }\r\n\r\n      superMoves[piece] = [bestMove, highestScore];\r\n    }\r\n\r\n    let finalMove = [];\r\n    let highestAllMoves = 0;\r\n\r\n    for (let pieces in superMoves) {\r\n      if (!superMoves.hasOwnProperty(pieces)) {\r\n        continue;\r\n      }\r\n\r\n      const pieceMove = superMoves[pieces][0];\r\n      const moveScore = superMoves[pieces][1];\r\n\r\n      if (moveScore >= highestAllMoves) {\r\n        if (moveScore === highestAllMoves) {\r\n          finalMove.push([pieces, pieceMove]);\r\n        }\r\n        if (moveScore > highestAllMoves) {\r\n          finalMove = [];\r\n          finalMove.push([pieces, pieceMove]);\r\n          highestAllMoves = moveScore;\r\n        }\r\n      }\r\n    }\r\n\r\n    const chooseMove = finalMove[Math.floor(Math.random() * finalMove.length)];\r\n\r\n    const out = {};\r\n    out.piece = chooseMove[0];\r\n    out.moveTo = chooseMove[1];\r\n\r\n    return out;\r\n  }\r\n\r\n  getRandomMove(boardState, player) {\r\n    const computerMoves = this.getComputerMoves(boardState, player);\r\n    const keys = Object.keys(computerMoves);\r\n    const randomPiece = keys[Math.floor(Math.random() * keys.length)];\r\n\r\n    const movesData = computerMoves[randomPiece][0];\r\n    const randomMoveTo =\r\n      movesData[Math.floor(Math.random() * movesData.length)];\r\n\r\n    let out = {};\r\n    out.piece = randomPiece;\r\n    out.moveTo = randomMoveTo;\r\n\r\n    return out;\r\n  }\r\n}\r\n\r\nexport default AI;","import React, { useState, useEffect, useCallback, useRef } from \"react\";\r\nimport { returnPlayerName } from \"../../helper.js\";\r\nimport ReactCheckers from \"../Checker/Checker.js\";\r\nimport Field from \"../Field/Field.js\";\r\nimport { connect } from \"react-redux\";\r\nimport Opponent from \"../AI/AI.js\";\r\nimport { local } from \"d3\";\r\n\r\nfunction useStateCallback(initialState) {\r\n  const [state, setState] = useState(initialState);\r\n  const cbRef = useRef(null); // mutable ref to store current callback\r\n\r\n  const setStateCallback = useCallback((state, cb) => {\r\n    cbRef.current = cb; // store passed callback to ref\r\n    setState(state);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // cb.current is `null` on initial render, so we only execute cb on state *updates*\r\n    if (cbRef.current) {\r\n      cbRef.current(state);\r\n      cbRef.current = null; // reset callback after execution\r\n    }\r\n  }, [state]);\r\n\r\n  return [state, setStateCallback];\r\n}\r\n\r\nconst setColumns = () => {\r\n  const columns = {};\r\n  columns.a = 0;\r\n  columns.b = 1;\r\n  columns.c = 2;\r\n  columns.d = 3;\r\n  columns.e = 4;\r\n  columns.f = 5;\r\n  columns.g = 6;\r\n  columns.h = 7;\r\n\r\n  return columns;\r\n};\r\nconst createBoard = (columns) => {\r\n  let board = {};\r\n\r\n  for (let key in columns) {\r\n    if (columns.hasOwnProperty(key)) {\r\n      for (let n = 1; n <= 8; ++n) {\r\n        let row = key + n;\r\n        board[row] = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  board = initPlayers(board);\r\n\r\n  return board;\r\n};\r\nconst initPlayers = (board) => {\r\n  const player1 = [\r\n    \"a8\",\r\n    \"c8\",\r\n    \"e8\",\r\n    \"g8\",\r\n    \"b7\",\r\n    \"d7\",\r\n    \"f7\",\r\n    \"h7\",\r\n    \"a6\",\r\n    \"c6\",\r\n    \"e6\",\r\n    \"g6\",\r\n  ];\r\n  const player2 = [\r\n    \"b3\",\r\n    \"d3\",\r\n    \"f3\",\r\n    \"h3\",\r\n    \"a2\",\r\n    \"c2\",\r\n    \"e2\",\r\n    \"g2\",\r\n    \"b1\",\r\n    \"d1\",\r\n    \"f1\",\r\n    \"h1\",\r\n  ];\r\n\r\n  player1.forEach(function (i) {\r\n    board[i] = createPiece(i, \"player1\");\r\n  });\r\n\r\n  player2.forEach(function (i) {\r\n    board[i] = createPiece(i, \"player2\");\r\n  });\r\n\r\n  return board;\r\n};\r\n\r\nconst createPiece = (location, player) => {\r\n  let piece = {};\r\n\r\n  piece.player = player;\r\n  piece.location = location;\r\n  piece.isKing = false;\r\n\r\n  return piece;\r\n};\r\n\r\nconst Game = ({ players, color, audio, theme }) => {\r\n  const columns = setColumns();\r\n  const User = new ReactCheckers(columns);\r\n  const Computer = new Opponent(columns);\r\n  const [state, setState] = useStateCallback({\r\n    history: [\r\n      {\r\n        boardState: createBoard(columns),\r\n        currentPlayer: color === \"White\" ? false : true,\r\n      },\r\n    ],\r\n    activePiece: null,\r\n    moves: [],\r\n    jumpKills: null,\r\n    hasJumped: null,\r\n    stepNumber: 0,\r\n    winner: null,\r\n  });\r\n\r\n  let currentState = state.history[state.stepNumber];\r\n  let boardState = state.history[state.stepNumber].boardState;\r\n\r\n  let currentPlayer = state.history[state.stepNumber].currentPlayer;\r\n  let moves = state.moves;\r\n\r\n  let gameStatus;\r\n  let undoClass = \"undo\";\r\n\r\n  if (state.stepNumber < 1) {\r\n    undoClass += \" disabled\";\r\n  }\r\n\r\n  switch (state.winner) {\r\n    case \"player1pieces\":\r\n      gameStatus = \"Black won!\";\r\n      break;\r\n    case \"player2pieces\":\r\n      gameStatus = \"White won!\";\r\n      break;\r\n    case \"player1moves\":\r\n      gameStatus = \"No moves left. Black won!\";\r\n      break;\r\n    case \"player2moves\":\r\n      gameStatus = \"No moves left. White won!\";\r\n      break;\r\n    default:\r\n      gameStatus =\r\n        currentState.currentPlayer === true\r\n          ? \"Black's turn.\"\r\n          : \"White's turn.\";\r\n      break;\r\n  }\r\n\r\n  const getCurrentState = () => {\r\n    const history = state.history.slice(0, state.stepNumber + 1);\r\n    return history[history.length - 1];\r\n  };\r\n\r\n  const handleClick = async (coordinates) => {\r\n    if (state.winner !== null) {\r\n      return;\r\n    }\r\n    const currentState = getCurrentState();\r\n    const boardState = currentState.boardState;\r\n    const clickedSquare = boardState[coordinates];\r\n\r\n    // Clicked on a piece\r\n    if (clickedSquare !== null) {\r\n      // Can't select opponents pieces\r\n      if (\r\n        clickedSquare.player !== returnPlayerName(currentState.currentPlayer)\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      // Unset active piece if it's clicked\r\n      if (state.activePiece === coordinates && state.hasJumped === null) {\r\n        setState({\r\n          ...state,\r\n          activePiece: null,\r\n          moves: [],\r\n          jumpKills: null,\r\n        });\r\n\r\n        // boardState=currentState.boardState;\r\n        return;\r\n      }\r\n\r\n      // Can't choose a new piece if player has already jumped.\r\n      if (state.hasJumped !== null && boardState[coordinates] !== null) {\r\n        return;\r\n      }\r\n\r\n      // Set active piece\r\n      let movesData = User.getMoves(\r\n        boardState,\r\n        coordinates,\r\n        clickedSquare.isKing,\r\n        false\r\n      );\r\n\r\n      setState({\r\n        ...state,\r\n        activePiece: coordinates,\r\n        moves: movesData[0],\r\n        jumpKills: movesData[1],\r\n      });\r\n      //boardState=currentState.boardState;\r\n      return;\r\n    }\r\n\r\n    // Clicked on an empty square\r\n    if (state.activePiece === null) {\r\n      return;\r\n    }\r\n\r\n    // Moving a piece\r\n    if (state.moves.length > 0) {\r\n      const postMoveState = User.movePiece(coordinates, state, color);\r\n\r\n      if (postMoveState === null) {\r\n        return;\r\n      }\r\n      audio.play();\r\n      updateStatePostMove(postMoveState).then((res) => {\r\n        if (\r\n          postMoveState.currentPlayer === !currentPlayer &&\r\n          postMoveState.winner === null\r\n        ) {\r\n          computerTurn(null, res);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const computerTurn = (piece = null, curState) => {\r\n    if (players > 1) {\r\n      return;\r\n    }\r\n\r\n    setTimeout(() => {\r\n      const curHistory = curState.history.slice(0, curState.stepNumber + 1);\r\n\r\n      const boardState = curHistory[curHistory.length - 1].boardState;\r\n\r\n      let computerMove;\r\n      let coordinates;\r\n      let moveTo;\r\n\r\n      // If var piece != null, the piece has previously jumped.\r\n      if (piece === null) {\r\n        //computerMove = Computer.getRandomMove(boardState, \"player2\");\r\n        computerMove = Computer.getSmartMove(\r\n          curState,\r\n          boardState,\r\n          color == \"Black\" ? \"player2\" : \"player1\"\r\n        );\r\n\r\n        coordinates = computerMove.piece;\r\n        moveTo = computerMove.moveTo;\r\n      } else {\r\n        // Prevent the computer player from choosing another piece to move. It must move the active piece\r\n        computerMove = User.getMoves(\r\n          boardState,\r\n          piece,\r\n          boardState[piece].isKing,\r\n          true\r\n        );\r\n        coordinates = piece;\r\n        moveTo =\r\n          computerMove[0][Math.floor(Math.random() * computerMove[0].length)];\r\n      }\r\n\r\n      const clickedSquare = boardState[coordinates];\r\n\r\n      let movesData = User.getMoves(\r\n        boardState,\r\n        coordinates,\r\n        clickedSquare.isKing,\r\n        false\r\n      );\r\n\r\n      setState(\r\n        {\r\n          ...curState,\r\n          activePiece: coordinates,\r\n          moves: movesData[0],\r\n          jumpKills: movesData[1],\r\n        },\r\n        (res) => {\r\n          setTimeout(() => {\r\n            const postMoveState = User.movePiece(moveTo, res, color);\r\n\r\n            if (postMoveState === null) {\r\n              return;\r\n            }\r\n            audio.play();\r\n            updateStatePostMove(postMoveState).then((result) => {\r\n              if (postMoveState.currentPlayer === false && color === \"Black\") {\r\n                computerTurn(postMoveState.activePiece, result);\r\n              }\r\n            });\r\n          }, 500);\r\n        }\r\n      );\r\n    }, 1000);\r\n  };\r\n\r\n  const updateStatePostMove = (postMoveState) => {\r\n    return new Promise((res, rej) => {\r\n      setState(\r\n        {\r\n          ...state,\r\n          history: [\r\n            ...state.history,\r\n            {\r\n              boardState: postMoveState.boardState,\r\n              currentPlayer: postMoveState.currentPlayer,\r\n            },\r\n          ],\r\n          activePiece: postMoveState.activePiece,\r\n          moves: postMoveState.moves,\r\n          jumpKills: postMoveState.jumpKills,\r\n          hasJumped: postMoveState.hasJumped,\r\n          stepNumber: state.history.length,\r\n          winner: postMoveState.winner,\r\n        },\r\n        res\r\n      );\r\n    });\r\n  };\r\n\r\n  const undo = () => {\r\n    setState({\r\n      history: [\r\n        {\r\n          boardState: createBoard(columns),\r\n          currentPlayer: color === \"White\" ? false : true,\r\n        },\r\n      ],\r\n      activePiece: null,\r\n      moves: [],\r\n      jumpKills: null,\r\n      hasJumped: null,\r\n      stepNumber: 0,\r\n      winner: null,\r\n    });\r\n    localStorage.setItem(\r\n      \"game-state\",\r\n      JSON.stringify({\r\n        history: [\r\n          {\r\n            boardState: createBoard(columns),\r\n            currentPlayer: color === \"White\" ? false : true,\r\n          },\r\n        ],\r\n        activePiece: null,\r\n        moves: [],\r\n        jumpKills: null,\r\n        hasJumped: null,\r\n        stepNumber: 0,\r\n        winner: null,\r\n      })\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"game-state\")) {\r\n      console.log(state);\r\n      setState(JSON.parse(localStorage.getItem(\"game-state\")));\r\n    }\r\n    if (state.history[0].currentPlayer) {\r\n      computerTurn(null, state);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"game-state\", JSON.stringify(state));\r\n  });\r\n\r\n  return (\r\n    <div className=\"reactCheckers\">\r\n      <div className=\"game-status\">{gameStatus}</div>\r\n      <div\r\n        className={\r\n          theme == \"1\"\r\n            ? \"game-board-wooden\"\r\n            : theme == \"0\"\r\n            ? \"game-board\"\r\n            : \"game-board-cartoon\"\r\n        }\r\n      >\r\n        <div className=\"game-board-letter\">\r\n          <span>8</span>\r\n          <span>7</span>\r\n          <span>6</span>\r\n          <span>5</span>\r\n          <span>4</span>\r\n          <span>3</span>\r\n          <span>2</span>\r\n          <span>1</span>\r\n        </div>\r\n        <Field\r\n          boardState={boardState}\r\n          currentPlayer={currentPlayer}\r\n          activePiece={state.activePiece}\r\n          moves={moves}\r\n          columns={columns}\r\n          onClick={(coordinates) => handleClick(coordinates)}\r\n        />\r\n        <div className=\"game-board-number\">\r\n          <span>A</span>\r\n          <span>B</span>\r\n          <span>C</span>\r\n          <span>D</span>\r\n          <span>E</span>\r\n          <span>F</span>\r\n          <span>G</span>\r\n          <span>H</span>\r\n        </div>\r\n      </div>\r\n      <div className=\"time-travel\">\r\n        <button className={undoClass} onClick={() => undo()}>\r\n          Restart\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  players: state.app.players,\r\n  color: state.app.color,\r\n  theme: state.app.theme,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Game);\r\n","import { local } from \"d3\";\r\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nconst SET_PLAYERS = \"SET_PLAYERS\",\r\n  SET_COLOR = \"SET_COLOR\",\r\n  SET_MUSIC = \"SET_MUSIC\",\r\n  SET_MUSIC_CHECK = \"SET_MUSIC_CHECK\",\r\n  SET_THEME = \"SET_THEME\";\r\n\r\nconst initialState = {\r\n  players: null,\r\n  color: \"Black\",\r\n  theme: 0,\r\n  music: 1,\r\n  musicCheck: 1,\r\n};\r\n\r\nconst saveToStorage = (state) => {\r\n  try {\r\n    localStorage.setItem(\"redux-state\", JSON.stringify(state));\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\nconst loadFromStorage = () => {\r\n  try {\r\n    const savedState = localStorage.getItem(\"redux-state\");\r\n    if (savedState===null) return undefined;\r\n    return JSON.parse(savedState);\r\n  } catch (e) {\r\n    console.log(e);\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const AppReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_PLAYERS:\r\n      return {\r\n        ...state,\r\n        players: action.players,\r\n      };\r\n    case SET_COLOR:\r\n      return {\r\n        ...state,\r\n        color: action.color,\r\n      };\r\n    case SET_MUSIC:\r\n      return {\r\n        ...state,\r\n        music: action.music,\r\n      };\r\n    case SET_MUSIC_CHECK:\r\n      return {\r\n        ...state,\r\n        musicCheck: action.musicCheck,\r\n      };\r\n    case SET_THEME:\r\n      return {\r\n        ...state,\r\n        theme: action.theme,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst setPlayersAction = (players) => ({\r\n  type: SET_PLAYERS,\r\n  players,\r\n});\r\n\r\nconst setColorAction = (color) => ({\r\n  type: SET_COLOR,\r\n  color,\r\n});\r\n\r\nconst setMusicAction = (music) => ({\r\n  type: SET_MUSIC,\r\n  music,\r\n});\r\n\r\nconst setMusicCheckAction = (musicCheck) => ({\r\n  type: SET_MUSIC_CHECK,\r\n  musicCheck,\r\n});\r\n\r\nconst setThemeAction = (theme) => ({\r\n  type: SET_THEME,\r\n  theme,\r\n});\r\n\r\nexport const setPlayers = (players) => {\r\n  return (dispatch) => {\r\n    dispatch(setPlayersAction(players));\r\n  };\r\n};\r\n\r\nexport const setColor = (color) => {\r\n  return (dispatch) => {\r\n    dispatch(setColorAction(color));\r\n  };\r\n};\r\n\r\nexport const setMusic = (music) => {\r\n  return (dispatch) => {\r\n    dispatch(setMusicAction(music));\r\n  };\r\n};\r\n\r\nexport const setMusicCheck = (musicCheck) => {\r\n  return (dispatch) => {\r\n    dispatch(setMusicCheckAction(musicCheck));\r\n  };\r\n};\r\n\r\nexport const setTheme = (theme) => {\r\n  return (dispatch) => {\r\n    dispatch(setThemeAction(theme));\r\n  };\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n  app: AppReducer,\r\n});\r\n\r\nconst persistedState = loadFromStorage()\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  persistedState,\r\n  composeWithDevTools(applyMiddleware(thunkMiddleware))\r\n);\r\n\r\nstore.subscribe(() => saveToStorage(store.getState()));\r\n\r\nexport default store;\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { setColor, setMusic, setMusicCheck, setTheme } from \"../../store\";\r\n\r\nconst Settings = ({\r\n  color,\r\n  music,\r\n  musicCheck,\r\n  theme,\r\n  setColor,\r\n  setMusic,\r\n  setMusicCheck,\r\n  setTheme,\r\n}) => {\r\n  const onChangeTheme = (event) => {\r\n    setTheme(event.target.value);\r\n  };\r\n\r\n  const onValueChange = (event) => {\r\n    setColor(event.target.value);\r\n  };\r\n\r\n  const handleChangeMusic = (e) => {\r\n    setMusic(e.target.value);\r\n    //audio.volume = volume;\r\n  };\r\n\r\n  const handleChangeMusicCheck = (e) => {\r\n    console.log(musicCheck);\r\n    setMusicCheck(e.target.value);\r\n    //audio.volume = volume;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"radio\">\r\n        <label>\r\n          <input\r\n            type=\"radio\"\r\n            value=\"Black\"\r\n            checked={color == \"Black\"}\r\n            onChange={onValueChange}\r\n          />\r\n          Black\r\n        </label>\r\n      </div>\r\n      <div className=\"radio\">\r\n        <label>\r\n          <input\r\n            type=\"radio\"\r\n            value=\"White\"\r\n            checked={color == \"White\"}\r\n            onChange={onValueChange}\r\n          />\r\n          White\r\n        </label>\r\n      </div>\r\n      <div>You will start the game as {color}</div>\r\n\r\n      <div className=\"radio\">\r\n        <label>\r\n          <input\r\n            type=\"radio\"\r\n            value=\"0\"\r\n            checked={theme == \"0\"}\r\n            onChange={onChangeTheme}\r\n          />\r\n          Default\r\n        </label>\r\n      </div>\r\n      <div className=\"radio\">\r\n        <label>\r\n          <input\r\n            type=\"radio\"\r\n            value=\"1\"\r\n            checked={theme == \"1\"}\r\n            onChange={onChangeTheme}\r\n          />\r\n          Wooden\r\n        </label>\r\n      </div>\r\n      <div className=\"radio\">\r\n        <label>\r\n          <input\r\n            type=\"radio\"\r\n            value=\"2\"\r\n            checked={theme == \"2\"}\r\n            onChange={onChangeTheme}\r\n          />\r\n          Cartoon\r\n        </label>\r\n      </div>\r\n      <div>\r\n        Current theme:\r\n        {theme == \"1\" ? \"Wooden\" : theme == \"0\" ? \"Default\" : \"Cartoon\"}\r\n      </div>\r\n\r\n      <div className=\"slider-wrapper\">\r\n        <label>\r\n          Music\r\n          <input\r\n            type=\"range\"\r\n            min=\"0\"\r\n            max=\"1\"\r\n            value={music}\r\n            onChange={handleChangeMusic}\r\n            step=\"0.1\"\r\n          />\r\n        </label>\r\n      </div>\r\n      <div className=\"slider-wrapper\">\r\n        <label>\r\n          Sounds\r\n          <input\r\n            type=\"range\"\r\n            min=\"0\"\r\n            max=\"1\"\r\n            value={musicCheck}\r\n            onChange={handleChangeMusicCheck}\r\n            step=\"0.1\"\r\n          />\r\n        </label>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  color: state.app.color,\r\n  music: state.app.music,\r\n  musicCheck: state.app.musicCheck,\r\n  theme: state.app.theme,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  setColor,\r\n  setMusic,\r\n  setMusicCheck,\r\n  setTheme,\r\n})(Settings);\r\n","export default __webpack_public_path__ + \"static/media/theme.5e496d2b.mp3\";","export default __webpack_public_path__ + \"static/media/checkerMove.20e306ae.mp3\";","import { connect } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header/Header\";\nimport Footer from \"./components/Footer/Footer\";\nimport Game from \"./components/Game/Game\";\nimport Settings from \"./components/Settings/Settings\";\nimport { setPlayers, setMusic, setMusicCheck } from \"./store\";\nimport { Switch, Route, Redirect, NavLink, useHistory } from \"react-router-dom\";\n\nimport theme from \"./sounds/theme.mp3\";\nimport themeCheck from \"./sounds/checkerMove.mp3\";\n\nconst useAudio = (url, ending, volume) => {\n  const [audio] = useState(new Audio(url));\n  const [playing, setPlaying] = useState(true);\n\n  const toggle = () => setPlaying(!playing);\n\n  useEffect(() => {\n    playing ? audio.play() : audio.pause();\n  }, [playing]);\n\n  useEffect(() => {\n    audio.addEventListener(\"ended\", () => {\n      setPlaying(false);\n      if (ending) setPlaying(true);\n    });\n    return () => {\n      audio.removeEventListener(\"ended\", () => {\n        setPlaying(false);\n        if (ending) setPlaying(true);\n      });\n    };\n  }, []);\n\n  return [playing, toggle, audio];\n};\n\nfunction App({\n  players,\n  music,\n  musicCheck,\n  setPlayers,\n  setMusic,\n  setMusicCheck,\n}) {\n  let history = useHistory();\n\n  const startGame = (players) => {\n    setPlayers(players);\n    <Redirect to=\"/game\" />;\n  };\n\n  let [playing, togglePlaying, audio] = useAudio(theme, true, music);\n  audio.play();\n\n  useEffect(() => {\n    audio.volume = music;\n  }, [music]);\n\n  let [playingCheck, togglePlayingCheck, audioCheck] = useAudio(\n    themeCheck,\n    false,\n    musicCheck\n  );\n\n  useEffect(() => {\n    audioCheck.volume = musicCheck;\n  }, [musicCheck]);\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", (e) => {\n      switch (e.key) {\n        case \"Tab\":\n          history.push(\"/settings\");\n          break;\n        case \"1\":\n          setPlayers(1);\n          history.push(\"/game\");\n          break;\n        case \"2\":\n          setPlayers(2);\n          history.push(\"/game\");\n          break;\n        case \"Escape\":\n          history.push(\"/menu\");\n          break;\n        case \"m\":\n          music ? setMusic(0) : setMusic(1);\n          break;\n        case \"M\":\n          music ? setMusic(0) : setMusic(1);\n          break;\n        case \"n\":\n          musicCheck ? setMusicCheck(0) : setMusicCheck(1);\n          break;\n        case \"N\":\n          musicCheck ? setMusicCheck(0) : setMusicCheck(1);\n          break;\n        default:\n          break;\n      }\n    });\n  }, [music, musicCheck]);\n  return (\n    <>\n      <Header />\n\n      <NavLink to=\"/menu\">\n        <div>Menu</div>\n      </NavLink>\n      <NavLink to=\"/settings\">\n        <div>settings</div>\n      </NavLink>\n\n      <Switch>\n        <Redirect exact from=\"/\" to=\"/menu\" />\n\n        <Route path=\"/menu\">\n          <div className=\"players-select\">\n            <div className=\"players\">\n              <NavLink\n                to=\"/game\"\n                className=\"one-player\"\n                onClick={() => startGame(1)}\n              >\n                <div>Singleplayer</div>\n              </NavLink>\n            </div>\n            <div className=\"players\">\n              <NavLink\n                to=\"/game\"\n                className=\"two-player\"\n                onClick={() => startGame(2)}\n              >\n                <div>Multiplayer</div>\n              </NavLink>\n            </div>\n          </div>\n        </Route>\n\n        <Route path=\"/game\">\n          <Game audio={audioCheck} />\n        </Route>\n\n        <Route path=\"/settings\">\n          <Settings />\n        </Route>\n      </Switch>\n      <Footer />\n    </>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  players: state.app.players,\n  music: state.app.music,\n  musicCheck: state.app.musicCheck,\n});\n\nexport default connect(mapStateToProps, {\n  setPlayers,\n  setMusic,\n  setMusicCheck,\n})(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}